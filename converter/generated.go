// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package converter

import (
	models "test/models"
	protobufs "test/protobufs"
)

type ConverterImpl struct{}

func (c *ConverterImpl) FromProto(source *protobufs.Test1) models.Test1 {
	var modelsTest1 models.Test1
	if source != nil {
		modelsTest1 = c.protobufsTest1ToModelsTest1((*source))
	}
	return modelsTest1
}
func (c *ConverterImpl) FromProtoMany(source []*protobufs.Test1) []models.Test1 {
	var modelsTest1List []models.Test1
	if source != nil {
		modelsTest1List = make([]models.Test1, len(source))
		for i := 0; i < len(source); i++ {
			modelsTest1List[i] = c.FromProto(source[i])
		}
	}
	return modelsTest1List
}
func (c *ConverterImpl) FromProtoMap(source map[string]*protobufs.Test1) map[string]models.Test1 {
	mapStringModelsTest1 := make(map[string]models.Test1, len(source))
	for key, value := range source {
		mapStringModelsTest1[key] = c.FromProto(value)
	}
	return mapStringModelsTest1
}
func (c *ConverterImpl) pProtobufsTest1NestedToModelsTest1Nested(source *protobufs.Test1Nested) models.Test1Nested {
	var modelsTest1Nested models.Test1Nested
	if source != nil {
		modelsTest1Nested = c.protobufsTest1NestedToModelsTest1Nested((*source))
	}
	return modelsTest1Nested
}
func (c *ConverterImpl) pProtobufsTest1RepeatedToModelsTest1Repeated(source *protobufs.Test1Repeated) models.Test1Repeated {
	var modelsTest1Repeated models.Test1Repeated
	if source != nil {
		modelsTest1Repeated = c.protobufsTest1RepeatedToModelsTest1Repeated((*source))
	}
	return modelsTest1Repeated
}
func (c *ConverterImpl) protobufsTest1NestedToModelsTest1Nested(source protobufs.Test1Nested) models.Test1Nested {
	var modelsTest1Nested models.Test1Nested
	modelsTest1Nested.F1 = source.F1
	modelsTest1Nested.F2 = source.F2
	var modelsTest1RepeatedList []models.Test1Repeated
	if source.F3 != nil {
		modelsTest1RepeatedList = make([]models.Test1Repeated, len(source.F3))
		for i := 0; i < len(source.F3); i++ {
			modelsTest1RepeatedList[i] = c.pProtobufsTest1RepeatedToModelsTest1Repeated(source.F3[i])
		}
	}
	modelsTest1Nested.F3 = modelsTest1RepeatedList
	return modelsTest1Nested
}
func (c *ConverterImpl) protobufsTest1RepeatedToModelsTest1Repeated(source protobufs.Test1Repeated) models.Test1Repeated {
	var modelsTest1Repeated models.Test1Repeated
	modelsTest1Repeated.Age = source.Age
	return modelsTest1Repeated
}
func (c *ConverterImpl) protobufsTest1ToModelsTest1(source protobufs.Test1) models.Test1 {
	var modelsTest1 models.Test1
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	modelsTest1.Name = xstring
	modelsTest1.Nested = c.pProtobufsTest1NestedToModelsTest1Nested(source.Nested)
	return modelsTest1
}
